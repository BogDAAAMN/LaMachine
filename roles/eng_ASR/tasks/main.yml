---
    - name: Failing if authorization is not properly configured
      fail:
        msg: "You did not set eng_ASR_user and eng_ASR_password in your configuration. This is required for eng_ASR to work! If you do not have the credentials yet, contact h.vandenheuvel@let.ru.nl to request access."
      when: eng_ASR_user == "undefined" or eng_ASR_password == "undefined"

    - name: Install CLAM #so we don't need to rely on languagemachines-basic nor python-core
      include_role:
        name: lamachine-python-install
      with_items:
          - { pip: "flask" }
          - { pip: "lxml" }
          - { pip: "requests" }
          - { pip: "requests_oauthlib" }
          - { pip: "requests_toolbelt" }
          - { pip: "pycrypto" }
          - { pip: "certifi" }
          - { pip: "pyyaml" }
          - { github_user: "proycon", github_repo: "clam", pip: "clam" }
      loop_control:
           loop_var: package

    - name: Installing webservice
      include_role:
        name: lamachine-python-install
      vars:
        package:
           github_user: "schemreier"
           github_repo: "eng_ASR"
           metadata:
              identifier: "eng_ASR"

    - name: Link Python package installation in opt/
      become: "{{lm_become}}"
      become_user: root
      shell: |
        export DIR=$(python3 -c "import {{item}}; print({{item}}.__path__[0])")
        if [ ! -e "$DIR" ]; then
            echo "Unable to find dir"
            exit 2
        fi
        if [ -e "{{lm_prefix}}/opt/{{item}}" ]; then
          rm "{{lm_prefix}}/opt/{{item}}"
        fi
        ln -sf $DIR {{lm_prefix}}/opt/{{item}}
      with_items:
        - clam
        - eng_ASR
      environment: "{{lm_env}}"

    - name: Removing old resources (if present)
      file:
          path: "{{lm_prefix}}/opt/eng_ASR_resources"
          state: absent
      ignore_errors: yes #in case it isn't there in the first place

    - name: Creating directory for resources
      become: "{{lm_become}}"
      become_user: root
      file:
          path: "{{lm_prefix}}/opt/eng_ASR_resources"
          state: directory
          owner: "{{unix_user}}"
          group: "{{unix_group}}"
          mode: u+rwx,g+rwsx,a+rx

    - name: Downloading resources
      get_url:
        url: https://applejack.science.ru.nl/downloads/eng_ASR/resources.tar.gz
        url_username: "{{eng_ASR_user}}"
        url_password: "{{eng_ASR_password}}"
        dest: "{{lm_prefix}}/opt/eng_ASR_resources/resources.tar.gz"
        tmp_dest: "{{lm_prefix}}/opt/eng_ASR_resources"


    - name: Finalising resource installation
      shell: |
          #!/bin/bash
          tar xzf resources.tar.gz
          rm -rf resources.tar.gz
          mv resources/* .
          chown -R {{unix_user}}:{{unix_group}} .
          find . -type d | xargs chmod u+rw,g+rw,a+rx
          find . -type f | xargs chmod u+rw,g+rw,a+r
      args:
          chdir: "{{lm_prefix}}/opt/eng_ASR_resources"

    - name: "Install webserver configuration for eng_ASR"
      become: "{{lm_become}}"
      become_user: root
      template:
        src: "nginx/eng_ASR.conf"
        dest: "{{lm_prefix}}/etc/nginx/conf.d/eng_ASR.conf"
        force: yes
        backup: yes
        owner: "{{unix_user}}"
      when: webservertype == "nginx"

    - name: "Install uwsgi configuration for eng_ASR"
      become: "{{lm_become}}"
      become_user: root
      template:
        src: "uwsgi/eng_ASR.ini"
        dest: "{{lm_prefix}}/etc/uwsgi-emperor/vassals/eng_ASR.ini"
        force: yes
        backup: yes
        owner: "{{web_user}}"
        group: "{{web_group}}"

    - name: "Install clam configuration for eng_ASR"
      become: "{{lm_become}}"
      become_user: root
      template:
        src: "clam/eng_ASR.config.yml"
        dest: "{{lm_prefix}}/etc/eng_ASR.config.yml"
        force: yes
        backup: yes
        owner: "{{unix_user}}"

    - name: Register webservice metadata
      include_role:
          name: lamachine-register
      vars:
          update: "{{item}}"
          metadata: #add entrypoint metadata to registry
              identifier: "{{item}}"
              entryPoints:
                - { "@type": "EntryPoint",  urlTemplate: "{{lm_base_url}}/{{item}}", interfaceType: "WUI", mediatorApplication: "#eng_ASR" }
                - { "@type": "EntryPoint",  urlTemplate: "{{lm_base_url}}/{{item}}", interfaceType: "REST", specification: "{{lm_base_url}}/{{item}}/info",  mediatorApplication: "#eng_ASR" }
      when: '"all" in services or item in services'
      with_items:
        - eng_ASR


