---

    - name: "Configuration Overview"
      debug:
          var: "{{item}}"
      with_items:
          - lamachine_version
          - conf_name
          - ansible_distribution
          - ansible_distribution_version
          - hostname
          - version
          - lamachine_path
          - locality
          - localenv_type
          - local_prefix
          - global_prefix
          - source_path
          - data_path
          - root
          - unix_user
          - homedir
          - prefer_distro
          - minimal

    - name: Checking force option
      debug:
          msg: Forcing recompilation of all packages
      when: force is defined

    - name: "Forced cleaning: Removing sources"
      become: "{{lm_become}}"
      become_user: root
      shell: |
        cd {{source_path}} || exit 0
        for f in */; do
          if [[ "$f" != "LaMachine/" ]]; then
            rm -rfv $f
          fi
        done
      args:
        executable: /bin/bash
        chdir: "{{source_path}}"
      when: force is defined and force|int >= 2

    - name: Create home bin directory
      file:
          path: "{{homedir}}/bin"
          mode: u+rwx,a+rx
          state: directory

    - name: Create global prefix directory
      file:
          path: "{{global_prefix}}"
          mode: u+rwx,a+rx
          state: directory
      when: locality == "global"

    - name: Ensure home directory is world-traversable
      file:
          path: "{{homedir}}"
          mode: u+rwx,a+x
      when: locality == "global"

    - name: Ensure home/bin is in $PATH by default #necessary because this is where our activation script will reside
      blockinfile:
        dest: "{{item}}"
        block: |
          if [[ "$PATH" != *"{{homedir}}/bin"* ]]; then
              export PATH=~/bin:$PATH #add ~/bin to $PATH, that is where the activation scripts are
          fi
        marker: '# {mark} LAMACHINE MANAGED BLOCK - path'
        insertafter: EOF
        create: yes
        mode: u+rwx
      with_items:
        - "{{homedir}}/.bashrc"
        - "{{homedir}}/.bash_profile" #login-shell (Mac OS X)
        - "{{homedir}}/.zshrc"


    - name: Set LaMachine update script
      template:
        src: lamachine-update.sh
        dest: "{{homedir}}/bin/lamachine-{{ conf_name }}-update"
        force: "yes"
        mode: u+rwx,a+rx

    - name: Set generic update script
      copy:
        dest: "{{homedir}}/bin/lamachine-update"
        content: |
            #!/bin/bash
            if [ -z "$LM_NAME" ]; then
                echo "You are not in a LaMachine environment! Unable to update, activate one first!">&2
                exit 2
            else
               if which "lamachine-$LM_NAME-update"; then
                    "lamachine-$LM_NAME-update" $@
               else
                    echo "Unable to find update script lamachine-$LM_NAME-update!">&2
                    exit 3
               fi
            fi
        mode: u+rwx,a+rx

    - name: Create LaMachine activation script
      template:
        src: lamachine-activate.sh
        dest: "{{homedir}}/bin/lamachine-{{ conf_name }}-activate"
        force: yes
        mode: u+rwx,a+rx


    - name: Link activation script to global environment
      become: "{{lm_become}}"
      become_user: root
      file:
        src: "{{homedir}}/bin/lamachine-{{conf_name}}-activate"
        dest: "{{global_prefix}}/bin/lamachine-{{conf_name}}-activate"
        state: link
      when: locality == "global"

    - name: Link update script to global environment
      become: "{{lm_become}}"
      become_user: root
      file:
        src: "{{homedir}}/bin/lamachine-{{conf_name}}-update"
        dest: "{{global_prefix}}/bin/lamachine-{{conf_name}}-update"
        state: link
      when: locality == "global"

    - name: Link generic update script to global environment
      become: "{{lm_become}}"
      become_user: root
      file:
        src: "{{homedir}}/bin/lamachine-update"
        dest: "{{global_prefix}}/bin/lamachine-update"
        state: link
      when: locality == "global"

    - import_tasks: debian.yml
      when: (ansible_distribution|lower == "debian" or ansible_distribution|lower == "ubuntu" or ansible_distribution|lower == "linux mint") and root

    - import_tasks: redhat.yml
      when: (ansible_distribution|lower == 'redhat' or ansible_distribution|lower == 'centos' or ansible_distribution|lower == 'fedora') and root

    - import_tasks: arch.yml
      when: (ansible_distribution|lower == 'archlinux') and root

    - import_tasks: macosx.yml
      when: (ansible_distribution|lower == 'macosx')

    - import_tasks: conda.yml
      when: localenv_type == 'conda' and locality == "local"

    - import_tasks: virtualenv.yml
      when: localenv_type == 'virtualenv' and locality == "local"


    - name: Enable activation script globally
      become: "{{lm_become}}"
      become_user: root
      copy:
        dest: "/etc/profile.d/lamachine-activate.sh"
        content: |
          #!/bin/bash
          export PATH={{global_prefix}}/bin:$PATH
          source {{global_prefix}}/bin/lamachine-{{conf_name}}-activate
        mode: a+rx
      when: locality == "global"

    - name: Link default activation script (local)
      file:
         src: "{{homedir}}/bin/lamachine-{{conf_name}}-activate"
         dest: "{{homedir}}/bin/lamachine-activate"
         state: link

    - name: Link default activation script (global)
      become: "{{lm_become}}"
      become_user: root
      file:
         src: "{{homedir}}/bin/lamachine-{{conf_name}}-activate"
         dest: "{{global_prefix}}/bin/lamachine-activate"
         state: link
      when: locality == "global"


    - name: Backward compatibility update script
      file:
        src: "{{homedir}}/bin/lamachine-{{ conf_name }}-update"
        dest: "{{homedir}}/bin/lamachine-update.sh"
        force: true
        state: link

    - name: Create source directory
      become: "{{lm_become}}"
      become_user: root
      file:
          path: "{{ source_path }}"
          state: directory
          owner: "{{unix_user}}"
          group: "{{unix_group}}"
          mode: u+rwx,g+rwsx,a+rx

    - name: Create shared data directory
      become: "{{lm_become}}"
      become_user: root
      file:
          path: "{{ data_path }}"
          state: directory
          owner: "{{unix_user}}"
          group: "{{unix_group}}"
          mode: u+rwx,g+rwsx,a+rx

    - name: Create directories
      become: "{{lm_become}}"
      become_user: root
      file:
          path: "{{ lm_prefix }}/{{item}}"
          state: directory
          owner: "{{unix_user}}"
          group: "{{unix_group}}"
          mode: u+rwx,g+rwsx,a+rx
      with_items:
          - bin
          - "bin/activate.d"
          - etc
          - lib
          - include
          - sbin
          - share
          - opt
          - var
          - "var/log"
          - "var/run"

    - name: Install motd
      become: "{{lm_become}}"
      become_user: root
      template:
        src: motd
        dest: "{{lm_prefix}}/etc/motd"
        force: yes
        backup: yes


    - name: Check existence of LaMachine source dir (migration v2.0.0 -> v2.0.1)
      stat:
         path: "{{ lm_prefix }}/LaMachine"
      register: lamachine_v2_0_0_source

    - name: Copy LaMachine controller to prefix
      become: "{{lm_become}}"
      become_user: root
      shell: |
          if [[ -e "{{lamachine_path}}/bootstrap.sh" ]] && [[ ! -e "{{source_path}}/LaMachine/bootstrap.sh" ]]; then
            if [[ "{{source_path}}" != "{{lamachine_path}}/"* ]]; then
              echo "Copy {{lamachine_path}} -> {{source_path}}/LaMachine">&2
              cp -Rp "{{lamachine_path}}" "{{source_path}}/LaMachine"
              exit $?
            else
              #source path is nested inside lamachine_path (usually bootstrap.sh was run inside a LaMachine git clone)
              #copy would recurse endlessly, link instead:
              ln -s "{{lamachine_path}}" "{{source_path}}/LaMachine"
              exit $?
            fi
          else
            exit 123
          fi
      args:
        executable: /bin/bash
      register: controllercopy
      when: (controller is defined and controller == "internal") or lamachine_v2_0_0_source.stat.exists
      failed_when: controllercopy.rc > 0 and controllercopy.rc != 123
      changed_when: controllercopy.rc > 0 and controllercopy.rc != 123


    - name: LaMachine source dir migration (v2.0.0 -> v2.0.1)
      become: "{{lm_become}}"
      become_user: root
      file:
         path: "{{ lm_prefix }}/LaMachine"
         state: absent

    - name: Create local Ansible hosts file
      copy:
        dest: "{{source_path}}/LaMachine/hosts.ini"
        content: "{{hostname}} ansible_connection=local"
        force: "no"
      when: controller is defined and controller == "internal"

    - name: Adding global library path to ldconfig
      become: yes
      copy:
        dest: "/etc/ld.so.conf.d/lamachine-{{conf_name}}.conf"
        content: "{{global_prefix}}/lib"
      when: root and locality == "global" and ansible_distribution|lower != 'macosx'

    - name: Running ldconfig
      become: yes
      command: ldconfig -v
      when: root and locality == "global" and ansible_distribution|lower != 'macosx'

    - name: Compiling boost from source for CentOS/RHEL (may take quite a while!)
      shell: |
          #!/bin/bash
          if [ ! -d boost_1_66_0 ]; then
              wget -q https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.tar.gz || exit 2
              tar xf boost_1_66_0.tar.gz || exit 2
              cd boost_1_66_0
              ./bootstrap.sh  --with-python=python3.6 --with-python-version=3.6 --prefix="{{lm_prefix}}" || exit 2
              ./b2 install --config=project-config.jam --prefix="{{lm_prefix}}" --with=all
              if [ ! -e "{{lm_prefix}}/include/boost" ]; then
                ln -s "{{source_path}}/boost_1_66_0/boost" "{{lm_prefix}}/include/boost"
                exit $?
              fi
              exit 0
          else
              exit 0
          fi
      args:
          executable: /bin/bash
          chdir: "{{source_path}}"
      when: ansible_distribution|lower == "centos" or ansible_distribution|lower == "rhel"

    - name: Obtaining Python version
      shell: python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))'
      register: python_version
      environment: "{{lm_env}}"
      changed_when: False

    - name: Obtaining global Python version
      shell: |
             #!/bin/bash
             [[ -f /usr/bin/python3 ]] && /usr/bin/python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))'
      args:
        executable: /bin/bash
      register: global_python_version
      ignore_errors: True
      changed_when: False

    - name: Testing whether virtualenv python is outdated
      fail:
        msg: "The global Python 3 on this system has been updated to {{ global_python_version.stdout }} and is now newer than the Python in this virtual environment ({{python_version.stdout}}). This may cause issues so we recommend to create a new LaMachine environment from scratch by following the instructions on https://proycon.github.io/LaMachine. You will most likely want to delete the current environment ({{local_prefix}}) first, assuming you stored no valuable data inside. If you really want to ignore this message and attempt to continue upgrading anyway, add the parameter nopythoncheck=1 when invoking lamachine-update."
      when: global_python_version.stdout != "" and global_python_version.stdout > python_version.stdout and locality == "local" and localenv_type == "virtualenv" and (nopythoncheck is not defined or nopythoncheck == 0)

    - name: Installing ansible locally (virtualenv)
      pip:
          name: "ansible"
          state: latest
          virtualenv: "{{ local_prefix }}"
      when: python_version.stdout >= "3.5" and locality == "local" and localenv_type == "virtualenv"

    - name: Installing ansible locally (virtualenv, old version)
      pip:
          name: "ansible"
          virtualenv: "{{ local_prefix }}"
          version: "2.4.4.0"
      when: python_version.stdout <= "3.4" and locality == "local" and localenv_type == "virtualenv"

    - name: Sending anonymous usage analytics to LaMachine creators
      shell: |
          #!/bin/bash
          #Sending some statistics to us so we know how often and on what systems LaMachine is used
          #recipient: Language Machines, Centre for Language Studies, Radboud University Nijmegen
          #
          #Transmitted are:
          # - The form in which you run LaMachine (vagrant/virtualenv/docker)
          # - Is it a new LaMachine installation or an update
          # - Stable or Development?
          # - The OS you are running on and its version
          # - Your Python version
          #
          #This information will never be used for any form of advertising
          #Your IP will only be used to compute country of origin, resulting reports will never contain personally identifiable information
          PYTHONVERSION=`python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'`
          if [ ! -e .reply ]; then
            MODE=new
          else
            MODE=update
          fi
          wget --timeout 10 -O - -q "http://applejack.science.ru.nl/lamachinetracker.php/{{ locality }}{% if locality == 'local' %}-{{ localenv_type }}{% else %}{% if flavour is defined %}-{{ flavour }}{% endif %}{% endif %}/$MODE/{{ version }}/$PYTHONVERSION/{{ ansible_distribution|lower }}/{{ ansible_distribution|lower }}/{{ ansible_distribution_version }}"  > .reply
      args:
          chdir: "{{source_path}}"
      when: private is not defined or not private

    - name: "Finding global pip3"
      shell: which pip3
      register: pip
      when: locality == "global"

    - name: Upgrade pip
      become: "{{lm_become}}"
      become_user: root
      shell: pip3 install --upgrade pip
      environment: "{{lm_env}}"

    - name: Install LaMachine list script
      template:
        src: lamachine-list
        dest: "{{lm_prefix}}/bin/lamachine-list"
        force: "yes"
        mode: u+rwx,a+rx

    - name: Reinitialize LaMachine registry
      copy:
        dest: "{{lm_prefix}}/var/lamachine-registry.json"
        content: "{}"
        mode: u+rwx,a+rx

    - name: Installing CodeMetaPy, needed for registering metadata
      include_role:
        name: lamachine-python-install
      vars:
        package: { github_user: "proycon", github_repo: "codemetapy", pip: "codemetapy" }

    - name: Registering extra metadata
      include_role:
          name: lamachine-register
      vars:
          url: "{% if 'url' in item %}{{item.url}}{% else %}{% endif %}"
          codemeta: "{% if 'codemeta' in item %}{{item.codemeta}}{% else %}{% endif %}"
          metadata: "{% if 'metadata' in item %}{{item.metadata}}{% else %}{}{% endif %}"
      when: metadata_extra is defined and metadata_extra
      with_items: "{{metadata_extra}}"

    - import_tasks: webserver.yml
      when: webserver is defined and webserver == true

    - name: "Adding custom activation script"
      become: "{{lm_become}}"
      become_user: root
      copy:
        dest: "{{lm_prefix}}/bin/activate.d/custom.sh"
        content: |
          #You can use this file to add custom activations
        force: no
        mode: u+rwx,a+rx




