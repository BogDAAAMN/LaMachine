---
    - import_tasks: debian.yml
      when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and root == True

    - import_tasks: redhat.yml
      when: (ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora') and root == True

    - import_tasks: arch.yml
      when: (ansible_distribution == 'Arch') and root == True

    - import_tasks: macosx.yml
      when: (ansible_distribution == 'MacOSX') and root == True

    - name: Create home bin directory #even on shared systems!
      file:
          path: "{{homedir}}/bin"
          state: directory

    - import_tasks: conda.yml
      when: (localenv_type == 'conda')

    - import_tasks: virtualenv.yml
      when: (localenv_type == 'virtualenv')


    - name: Set LaMachine activation script
      blockinfile:
        dest: "{{homedir}}/bin/lamachine-{{ conf_name }}.activate"
        block: |
          #!/bin/bash
          if [[ ! -z "$VIRTUAL_ENV" ]] && [[ "$VIRTUAL_ENV" != "$LM_LOCAL_PREFIX" ]]; then
              #We seem to already be in a virtualenv (possibly the LaMachine controller!) deactivate it first
              deactivate
          fi
          if [[ "$PATH" == *"lamachine-controller"* ]]; then
              export PATH=${PATH/lamachine-controller/DISABLED} #extra fallback to ensure the controller environment is not active
          fi
          export LM_PREFER_LOCAL={{prefer_local|int}}
          export LM_PREFER_GLOBAL={{prefer_global|int}}
          export LM_SHARED={{shared|int}}
          export LM_GLOBAL_PREFIX={{global_prefix}}
          export LM_LOCAL_PREFIX={{local_prefix}}
          export LM_LOCALENV_TYPE={{localenv_type}}
          export LM_DATA_PATH={{data_path}}
          export LM_PATH={{lamachine_path}}
          export LM_SOURCEPATH={{source_path}}
          unset PYTHONPATH #would most likely mess thing up otherwise
          if [ $LM_PREFER_GLOBAL -eq 0 ]; then
              if [ -d $LM_LOCAL_PREFIX ]; then
                  if [[ "$LM_LOCALENV_TYPE" == "conda" ]]; then
                      source activate lamachine-{{conf_name}}
                      export VIRTUAL_ENV=$LM_LOCAL_PREFIX #backward compatibility
                  else
                      source $LM_LOCAL_PREFIX/bin/activate
                  fi
              fi
          fi
        marker: '# {mark} LAMACHINE MANAGED BLOCK - lamachine environment'
        insertafter: EOF
        create: yes
        mode: u+rwx

    - name: Link activation script
      file:
         src: "{{homedir}}/bin/lamachine-{{conf_name}}.activate"
         dest: "{{homedir}}/bin/lamachine.activate"
         state: link

    - name: Automatic local user environment activation
      blockinfile:
        dest: "{{homedir}}/.bashrc"
        block: |
            source {{homedir}}/bin/lamachine-{{conf_name}}.activate
        marker: '# {mark} LAMACHINE MANAGED BLOCK - lamachine environment'
        insertafter: EOF
        create: yes
      when: not shared

    - name: Create local Ansible hosts file
      copy:
        dest: "{{lamachine_path}}/hosts.{{ conf_name }}"
        content: "{{hostname}} ansible_connection=local"
        force: "no"

    - name: Set LaMachine update script
      copy:
        dest: "{{homedir}}/bin/lamachine-{{ conf_name }}.update"
        content: |
          #!/bin/bash
          cd {{lamachine_path}}
          if [ -d .git ]; then
            git pull
          fi
          ansible-playbook -i {{lamachine_path}}/hosts.{{conf_name}} install-{{conf_name}}.yml
        mode: u+rwx

    - name: Link update script
      file:
        src: "{{homedir}}/bin/lamachine-{{ conf_name }}.update"
        dest: "{{homedir}}/bin/lamachine.update"
        force: true
        state: link

    - name: Backward compatibility update script
      file:
        src: "{{homedir}}/bin/lamachine-{{ conf_name }}.update"
        dest: "{{homedir}}/bin/lamachine-update.sh"
        force: true
        state: link

    - name: Create source directory
      file:
          path: "{{ source_path }}"
          state: directory

    - name: Installing ansible locally (conda)
      pip:
          name: "ansible"
          state: latest
          executable: "{{ local_prefix }}/bin/pip"
      when: not prefer_global and localenv_type == "conda"

    - name: Installing ansible locally (virtualenv)
      pip:
          name: "ansible"
          state: latest
          virtualenv: "{{ local_prefix }}"
      when: not prefer_global and localenv_type == "virtualenv"

    - import_tasks: webserver.yml
      when: webserver is defined and webserver == true




