---

    - name: "Configuration Overview"
      debug:
          var: "{{item}}"
      with_items:
          - conf_name
          - ansible_distribution
          - ansible_distribution_version
          - hostname
          - version
          - lamachine_path
          - localenv_type
          - local_prefix
          - global_prefix
          - source_path
          - locality
          - root
          - unix_user
          - homedir

    - name: Checking force option
      debug:
          msg: Forcing recompilation of all packages
      when: force is defined


    - name: Create home bin directory
      file:
          path: "{{homedir}}/bin"
          state: directory

    - name: Ensure home/bin is in $PATH by default #necessary because this is where our activation script will reside
      blockinfile:
        dest: "{{homedir}}/.bashrc"
        block: |
          if [[ "$PATH" == *"{{homedir}}/bin"* ]]; then
              export PATH=~/bin:$PATH #extra fallback to ensure the controller environment is not active
          fi
        marker: '# {mark} LAMACHINE MANAGED BLOCK - path'
        insertafter: EOF
        create: yes
        mode: u+rwx

    - name: Set LaMachine update script
      copy:
        dest: "{{homedir}}/bin/lamachine-{{ conf_name }}-update"
        content: |
          #!/bin/bash
          cd {{lamachine_path}}
          if [ -d .git ]; then
            git pull
          fi
          OPTS-""
          if [ {{root|int}} -eq 1 ]; then
             OPTS="--ask-become-pass"
          fi
          if [ {{prefer_distro|int}} -eq 1 ]; then
             OPTS="$OPTS --prefer-distro"
          fi
          if [ {{minimal|int}} -eq 1 ]; then
             OPTS="$OPTS --minimal"
          fi
          ansible-playbook -i {{lamachine_path}}/hosts.{{conf_name}} install-{{conf_name}}.yml -v $OPTS --extra-vars "$*"
        mode: u+rwx

    - name: Link update script
      file:
        src: "{{homedir}}/bin/lamachine-{{ conf_name }}-update"
        dest: "{{homedir}}/bin/lamachine-update"
        force: true
        state: link


    - import_tasks: debian.yml
      when: ansible_distribution|lower == "debian" or ansible_distribution|lower == "ubuntu" or ansible_distribution|lower == "linuxmint"

    - import_tasks: redhat.yml
      when: (ansible_distribution|lower == 'redhat' or ansible_distribution|lower == 'centos' or ansible_distribution|lower == 'fedora') and root

    - import_tasks: arch.yml
      when: (ansible_distribution|lower == 'arch') and root

    - import_tasks: macosx.yml
      when: (ansible_distribution|lower == 'macosx')


    - import_tasks: conda.yml
      when: (localenv_type == 'conda')

    - import_tasks: virtualenv.yml
      when: (localenv_type == 'virtualenv')


    - name: Set LaMachine activation script
      blockinfile:
        dest: "{{homedir}}/bin/lamachine-{{ conf_name }}-activate"
        block: |
          #!/bin/bash
          if [[ ! -z "$VIRTUAL_ENV" ]] && [[ "$VIRTUAL_ENV" != "$LM_LOCAL_PREFIX" ]]; then
              #We seem to already be in a virtualenv (possibly the LaMachine controller!) deactivate it first
              if which deactivate >/dev/null; then
                  echo "(Deactivating $VIRTUAL_ENV first)"
                  deactivate
              fi
          fi
          if [[ "$PATH" == *"lamachine-controller"* ]]; then
              export PATH=${PATH/lamachine-controller/DISABLED} #extra fallback to ensure the controller environment is not active
          fi
          export LM_LOCALITY={{locality}}
          export LM_GLOBAL_PREFIX={{global_prefix}}
          export LM_LOCALENV_TYPE={{localenv_type}}
          export LM_DATA_PATH={{data_path}}
          export LM_PATH={{lamachine_path}}
          export LM_SOURCEPATH={{source_path}}
          unset PYTHONPATH #would most likely mess thing up otherwise
          if [[ "{{ ansible_distribution|lower }}" == "macosx" ]]; then
             export CLANG_CXX_LIBRARY="libc++" #needed for python bindings in python-install
             export MACOSX_DEPLOYMENT_TARGET="{{ ansible_distribution_version }}"
          fi
          if [[ "$LM_LOCALITY" == "local" ]]; then
              export LM_LOCAL_PREFIX={{local_prefix}}
              export LM_PREFIX={{local_prefix}}
              if [ -d $LM_LOCAL_PREFIX ]; then
                  if [[ "$LM_LOCALENV_TYPE" == "conda" ]]; then
                      source activate lamachine-{{conf_name}}
                      export VIRTUAL_ENV=$LM_LOCAL_PREFIX #backward compatibility
                  else
                      source $LM_LOCAL_PREFIX/bin/activate
                  fi
              fi
          else
              export LM_PREFIX={{global_prefix}}
          fi
        marker: '# {mark} LAMACHINE MANAGED BLOCK - lamachine environment'
        insertafter: EOF
        create: yes
        mode: u+rwx

    - name: Link activation script
      file:
         src: "{{homedir}}/bin/lamachine-{{conf_name}}-activate"
         dest: "{{homedir}}/bin/lamachine-activate"
         state: link


    - name: Create local Ansible hosts file
      copy:
        dest: "{{lamachine_path}}/hosts.{{ conf_name }}"
        content: "{{hostname}} ansible_connection=local"
        force: "no"


    - name: Backward compatibility update script
      file:
        src: "{{homedir}}/bin/lamachine-{{ conf_name }}-update"
        dest: "{{homedir}}/bin/lamachine-update.sh"
        force: true
        state: link

    - name: Create source directory
      become: "{% if locality == 'global' %}yes{% else %}no{% endif %}"
      become_user: root
      file:
          path: "{{ source_path }}"
          state: directory
          owner: "{{unix_user}}"

    - name: Link to LaMachine controller from local prefix
      file:
        src: "{{lamachine_path}}"
        dest: "{{local_prefix}}/LaMachine"
        force: true
        state: link
      when: locality == "local"

    - name: Link to LaMachine controller from global prefix
      become: yes
      become_user: root
      file:
        src: "{{lamachine_path}}"
        dest: "/usr/local/LaMachine"
        force: true
        state: link
      when: locality == "global"

    - name: Link to source directory from local prefix
      file:
        src: "{{local_prefix}}/LaMachine/src"
        dest: "{{local_prefix}}/src"
        force: true
        state: link
      when: locality == "local" and local_prefix not in source_path

    - name: Installing ansible locally (conda)
      pip:
          name: "ansible"
          state: latest
          executable: "{{ local_prefix }}/bin/pip"
      when: locality == "local" and localenv_type == "conda"

    - name: Installing ansible locally (virtualenv)
      pip:
          name: "ansible"
          state: latest
          virtualenv: "{{ local_prefix }}"
      when: locality == "local" and localenv_type == "virtualenv"

    - name: Sending anonymous usage analytics to LaMachine creators
      shell: |
          #!/bin/bash
          #Sending some statistics to us so we know how often and on what systems LaMachine is used
          #recipient: Language Machines, Centre for Language Studies, Radboud University Nijmegen
          #
          #Transmitted are:
          # - The form in which you run LaMachine (vagrant/virtualenv/docker)
          # - Is it a new LaMachine installation or an update
          # - Stable or Development?
          # - The OS you are running on and its version
          # - Your Python version
          #
          #This information will never be used for any form of advertising
          #Your IP will only be used to compute country of origin, resulting reports will never contain personally identifiable information
          PYTHONVERSION=`python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'`
          if [ ! -e .reply ]; then
            MODE=new
          else
            MODE=update
          fi
          wget --timeout 10 -O - -q "http://applejack.science.ru.nl/lamachinetracker.php/{{ locality }}{% if locality == 'local' %}-{{ localenv_type }}{% else %}{% if flavour is defined %}-{{ flavour }}{% endif %}{% endif %}/$MODE/{{ version }}/$PYTHONVERSION/{{ ansible_distribution|lower }}/{{ ansible_distribution|lower }}/{{ ansible_distribution_version }}"  > .reply
      args:
          chdir: "{{source_path}}"
      when: private is not defined or not private

    - import_tasks: webserver.yml
      when: webserver is defined and webserver == true




