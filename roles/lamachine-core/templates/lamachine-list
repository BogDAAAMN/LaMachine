#!/usr/bin/env python

import sys
import argparse
from collections import OrderedDict
import json
import yaml


if yaml is not None:
    def represent_ordereddict(dumper, data):
        value = []

        for item_key, item_value in data.items():
            node_key = dumper.represent_data(item_key)
            node_value = dumper.represent_data(item_value)

            value.append((node_key, node_value))

        return yaml.nodes.MappingNode('tag:yaml.org,2002:map', value)

    yaml.add_representer(OrderedDict, represent_ordereddict)

def yaml_simplify(d):
    if isinstance(d, (dict, OrderedDict)):
        return dict( (k, yaml_simplify(v)) for k, v in d.items() if k[0] != '@' )
    elif isinstance(d, (list, tuple)):
        return list( yaml_simplify(v) for v in d )
    else:
        return d

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="LaMachine list")
    #parser.add_argument('--yaml', help="Read metadata from standard input (YAML format)", action='store_true',required=False)
    parser.add_argument('-r', "--registry", type=str,help="Short output", action='store',required=False, default="{{lm_prefix}}/var/lamachine-registry.json")
    parser.add_argument('-s', "--short", help="Short output", action='store_true',required=False)
    parser.add_argument("--json", help="Short output", action='store_true',required=False)
    parser.add_argument("--dependencies", help="Include all dependencies as well", action='store_true',required=False)
    parser.add_argument('software', nargs='*', help='Software packages to query (if not specified, will return all)')
    args = parser.parse_args()
    with open(args.registry,'r',encoding='utf-8') as f:
        registry = json.load(f)
    jsonout = {}
    softwarelist = [ x.lower() for x in args.software ]
    if softwarelist and args.dependencies:
        for identifier, data in sorted(registry.items(), key=lambda x: x[0].lower()):
            if data['identifier'].lower() in softwarelist:
                if 'softwareRequirements' in data:
                    for dep in data['softwareRequirements']:
                        if 'identifier' in dep and dep['identifier'].lower() not in softwarelist:
                            softwarelist.append(dep['identifier'].lower())

    for identifier, data in sorted(registry.items(), key=lambda x: x[0].lower()):
        if not softwarelist or data['identifier'].lower() in softwarelist:
            if args.short:
                print('{0: <20}'.format(data['identifier'].lower()) + "\t" + '{0: <30}'.format(data['name']) + "\t" + data['version'] + "\t" + data['description'])
            elif args.json:
                jsonout[data['identifier'].lower()] = data
            else:
                del registry[data['identifier'].lower()]['@context']
                print(yaml.dump({data['identifier'].lower(): yaml_simplify(registry[data['identifier'].lower()])}, default_flow_style=False))

    if args.json:
        print(json.dumps(jsonout, ensure_ascii=False,indent=4))
