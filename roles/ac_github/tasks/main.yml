---
- when: "'exclude_when' not in package or not package.exclude_when"
  block:
    - name: "{{package.repo}} - Check if repository exists"
      stat:
        path: "{{ source_path }}/{{package.repo}}"
      register: repo_path

    - name: "{{package.repo}} - Git clone"
      shell: "git clone https://github.com/{{package.user}}/{{package.repo}}"
      args:
        chdir: "{{ source_path }}"
      when: not repo_path.stat.exists

    - name: "{{package.repo}} - Get new git tags from remote"
      shell: "git fetch --tags"
      args:
        chdir: "{{ source_path }}/{{package.repo}}"
      changed_when: False
      when: version == "stable"

    - name: "{{package.repo}} - Get latest version tag"
      shell: "git tag -l | grep '^v' | sort -t. -k 1.2,1n -k 2,2n -k 3,3n -k 4,4n | tail -n 1 | tee .latest-release.lamachine"
      args:
        chdir: "{{ source_path }}/{{package.repo}}"
      register: latest_tag
      changed_when: False
      when: version == "stable"

    - name: "{{package.repo}} - Checkout latest stable version {{latest_tag.stdout}}"
      shell: "git checkout {{latest_tag.stdout}}"
      args:
        chdir: "{{ source_path }}/{{package.repo}}"
      register: gitcheckout
      changed_when: '"Switched to branch" in gitcheckout.stdout'
      when: version == "stable"

    - name: "{{package.repo}} - Checkout latest master version of (development)"
      shell: "git checkout master && git pull"
      args:
        chdir: "{{ source_path }}/{{package.repo}}"
      register: gitcheckout
      changed_when: '("Switched to branch" in gitcheckout.stdout) or ("files changed" in gitcheckout.stdout)'
      when: version == "development"


    - name: "{{package.repo}} - Checkout custom version: {{customversion[package.repo]}}"
      shell: "git checkout {{customversion[package.repo]}} && git pull"
      args:
        chdir: "{{ source_path }}/{{package.repo}}"
      changed_when: '("Switched to branch" in gitcheckout.stdout) or ("files changed" in gitcheckout.stdout)'
      when: version == "custom"

    - name: "{{package.repo}} - Checking whether recompilation is needed"
      shell: |
          {% if (force is defined) or (ac_github_updated is defined and ac_github_updated.stdout|int == 1) %}
          #an earlier compilation was (re)performed so we update everything thereafter as well
          echo 1 && exit 0
          echo "Compilation required because of earlier updates...">&2
          {% endif %}
          available=$(git rev-parse HEAD)
          echo "Available commit: $available">&2
          if [ -f .installed-commit.lamachine ]; then
            installed=$(cat .installed-commit.lamachine)
            echo "Installed commit: $installed">&2
            if [ "$available" = "$installed" ]; then
              echo "No recompilation necessary...">&2
              echo 0 && exit 0
            fi
          fi
          echo "Scheduling compilation...">&2
          if [ -e Makefile ]; then
            echo "Cleaning up old version first">&2
            make distclean
          fi
          echo 1
      args:
        chdir: "{{ source_path }}/{{package.repo}}"
      register: ac_github_updated
      changed_when: ac_github_updated.stdout|int == 1

    - name: "{{package.repo}} - Compiling"
      import_role:
        name: ac_compile
      vars:
        pkg_source_dir: "{{ source_path }}/{{package.repo}}"
        pkg_name: "{{package.repo}}"
      when: ac_github_updated.stdout|int == 1

    - name: "{{package.repo}} - Registering current version"
      shell: "git rev-parse HEAD > .installed-commit.lamachine"
      args:
        chdir: "{{ source_path }}/{{package.repo}}"
      when: ac_github_updated.stdout|int == 1 and make_install_result is defined and make_install_result.rc == 0


