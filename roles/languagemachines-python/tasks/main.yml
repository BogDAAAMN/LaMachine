---

    - name: Installing Python packages
      include_role:
        name: lamachine-python-install
      with_items:
          - { github_user: "proycon", github_repo: "pynlpl", pip: "pynlpl" }
          - { github_user: "proycon", github_repo: "clam", pip: "clam" }
          - { github_user: "proycon", github_repo: "folia", pip: "folia-tools" }
          - { github_user: "proycon", github_repo: "foliadocserve", pip: "foliadocserve" }
          - { github_user: "proycon", github_repo: "babelpy", pip: "babelpy" }
          - { github_user: "proycon", github_repo: "babelente", pip: "babelente" }
      loop_control:
           loop_var: package

    - name: Testing Python packages
      include_role:
          name: lamachine-run
      vars:
          command: "python3 -c 'import {{ item }}'"
      with_items:
          - pynlpl
          - pynlpl.formats.folia
      register: test
      changed_when: test.rc != 0

    - name: Updating metadata for CLARIAH software
      include_role:
        name: lamachine-register
      vars:
        update: "{{item}}"
        metadata:
          identifier: "{{item}}"
          funder:
            - "@type": Organization
              name: CLARIAH
              url: https://clariah.nl
      with_items:
        - clam
        - folia-tools

    - name: Updating metadata for BabelEnte
      include_role:
        name: lamachine-register
      vars:
        update: "babelente"
        metadata:
          identifier: babelente
          funder: "TraMOOC"

    - name: Testing whether python-based tools start
      include_role:
          name: lamachine-run
      vars:
          command: "{{ item }} -h"
      with_items:
          - foliavalidator
          - clamservice
          - folia2html
          - folia2txt
          - foliaquery
          - babelente
      register: test
      changed_when: test.rc != 0

    - when: webserver
      block:
        - name: Installing FLAT
          include_role:
            name: lamachine-python-install
          vars:
            package:
               github_user: "proycon"
               github_repo: "flat"
               pip: "FoLiA-Linguistic-Annotation-Tool"
            metadata:
              identifier: "flat"
              name: "FLAT: FoLiA Linguistic Annotation Tool"
              entryPoints:
                - { "@type": "EntryPoint",  urlTemplate: "{{lm_base_url}}/flat", interfaceType: "WUI" }
          when: '"all" in services or "flat" in services'

        - name: Registering foliadocserve entrypoint
          include_role:
            name: lamachine-register
          vars:
            update: "foliadocserve"
            metadata:
              entryPoints:
                - "@type": "EntryPoint"
                  urlTemplate: "{{lm_base_url}}/foliadocserve"
                  interfaceType: "WUI"
                - "@type": "EntryPoint"
                  urlTemplate: "{{lm_base_url}}/foliadocserve"
                  interfaceType: "REST"
          when: '"all" in services or "foliadocserve" in services'

        - name: Installing webservices
          include_role:
            name: lamachine-python-install
          vars:
            package:
               github_user: "proycon"
               github_repo: "clamservices"
               pip: "clamservices"

        - name: Register webservices
          include_role:
              name: lamachine-register
          vars:
              update: "{{item}}"
              metadata: #add entrypoint metadata to registry
                  identifier: "{{item}}"
                  entryPoints:
                    - { "@type": "EntryPoint",  urlTemplate: "{{lm_base_url}}/{{item}}", interfaceType: "WUI", mediatorApplication: "#clamservices" }
                    - { "@type": "EntryPoint",  urlTemplate: "{{lm_base_url}}/{{item}}", interfaceType: "REST", specification: "{{lm_base_url}}/{{item}}/info",  mediatorApplication: "#clamservices" }
          when: '"all" in services or item in services'
          with_items:
            - frog
            - ucto
            - timbl
            - babelente

        - name: Register colibri-core webservice
          include_role:
              name: lamachine-register
          vars:
            update: "colibri-core"
            metadata: #add entrypoint metadata to registry
                identifier: "colibri-core"
                entryPoints:
                  - { "@type": "EntryPoint",  urlTemplate: "{{lm_base_url}}/colibricore", interfaceType: "WUI", mediatorApplication: "#clamservices" }
                  - { "@type": "EntryPoint",  urlTemplate: "{{lm_base_url}}/colibricore", interfaceType: "REST", specification: "{{lm_base_url}}/colibricore/info",  mediatorApplication: "#clamservices" }

        - name: Link Python package installation in opt/
          become: "{{lm_become}}"
          become_user: root
          shell: |
            export DIR=$(python3 -c "import {{item}}; print({{item}}.__path__[0])")
            if [ ! -e "$DIR" ]; then
                echo "Unable to find dir"
                exit 2
            fi
            if [ -e "{{lm_prefix}}/opt/{{item}}" ]; then
              rm "{{lm_prefix}}/opt/{{item}}"
            fi
            ln -sf $DIR {{lm_prefix}}/opt/{{item}}
          with_items:
            - clam
            - clamservices
            - django
            - flat
          environment: "{{lm_env}}"

        - name: "Install webserver configuration"
          become: "{{lm_become}}"
          become_user: root
          template:
            src: "nginx/clamservices.conf"
            dest: "{{lm_prefix}}/etc/nginx/conf.d/clamservices.conf"
            force: yes
            backup: yes
            owner: "{{unix_user}}"
            group: "{{unix_group}}"
          when: webservertype == "nginx" and ("all" in services or "ucto"  in services or "frog" in services or "timbl" in services or "colibricore" in services)

        - name: "Install uwsgi configurations"
          become: "{{lm_become}}"
          become_user: root
          template:
            src: "uwsgi/{{item}}.ini"
            dest: "{{lm_prefix}}/etc/uwsgi-emperor/vassals/{{item}}.ini"
            force: yes
            backup: yes
            owner: "{{web_user}}" #permissions need to match the runner
            group: "{{web_group}}"
            mode: u+rw,a+r
          when: '"all" in services or item in services'
          with_items:
            - frog
            - ucto
            - timbl
            - colibricore
            - babelente #technically not part of clamservices but included here for convenience
          #note: some things like alpino are deferred to that respective role

        - name: "Install clam configuration"
          become: "{{lm_become}}"
          become_user: root
          template:
            src: "clam/{{item}}.config.yml"
            dest: "{{lm_prefix}}/etc/{{item}}.config.yml"
            force: yes
            backup: yes
            owner: "{{unix_user}}"
            group: "{{unix_group}}"
            mode: u+rw,a+r
          when: '"all" in services or item in services'
          with_items:
            - frog
            - ucto
            - timbl
            - colibricore
            - babelente

        - name: "Setting up FLAT"
          import_tasks: flat.yml
          when: '"all" in services or "flat" in services'
