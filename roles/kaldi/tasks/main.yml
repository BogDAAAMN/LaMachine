---

  - name: Check for unsupported OS for Kaldi
    debug:
      msg: "Kaldi is not supported on Mac OS X"
    when: ansible_distribution|lower == "macosx"

  - name: "Configuration Overview for kaldi"
    debug:
         var: "{{item}}"
    with_items:
         - kaldi_branch
         - kaldi_source
         - kaldi_test_ignore_errors
         - kaldi_configure_options
         - recompile_kaldi

  - name: Installing global dependencies for Kaldi
    include_role:
      name: lamachine-package-install
    with_items:
      - { debian: sox, redhat: sox }
      - { debian: subversion, redhat: subversion }
      - { debian: libatlas-base-dev, redhat: atlas-devel }
      - { debian: gfortran, redhat: libgfortran, arch: gcc-fortran }
    loop_control:
        loop_var: package
    when: root

  - name: "Obtaining and compiling atlas-lapack from AUR (this takes a LONG time!)"
    shell: |
      git clone https://aur.archlinux.org/atlas-lapack.git
      cd atlas-lapack
      makepkg
      echo "WARNING: Compiling ATLAS with --cripple-atlas-performance to proceed in the face of CPU throttling! Degrades performance and makes timings non-sensical!!!" >&2
      sed -i 's/--with-netlib-lapack-tarfile/--cripple-atlas-performance --with-netlib-lapack-tarfile/' PKGBUILD
    args:
      chdir: "{{source_path}}"
    when: (ansible_distribution|lower == 'archlinux' or ansible_distribution|lower == 'manjaro')

  - name: "Installing atlas-lapack from AUR"
    become: yes
    become_user: root
    shell: |
      #!/bin/bash
      yes | pacman -U --noconfirm atlas*xz
    args:
      chdir: "{{source_path}}/atlas-lapack"
    when: (ansible_distribution|lower == 'archlinux' or ansible_distribution|lower == 'manjaro') and root

  - when: recompile_kaldi is not defined or recompile_kaldi == "yes" #default
    block:
      - name: "Checking out Kaldi"
        git:
          repo: "{{kaldi_source}}"
          dest: "{{lm_prefix}}/opt/kaldi"
          version: "{{kaldi_branch}}"
          force: yes

      - name: Patch OpenFST makefile so that we can link with it statically (needed for Alex-ASR)
        shell: sed -i "s/--enable-far --enable-ngram-fsts/--enable-far --with-pic --enable-ngram-fsts/" Makefile
        args:
           chdir: "{{lm_prefix}}/opt/kaldi/tools"

      - name: Compiling kaldi/tools
        shell: make -j $(nproc)
        args :
          chdir: "{{lm_prefix}}/opt/kaldi/tools"
        environment:
          KALDI_ROOT: "{{lm_prefix}}/opt/kaldi"
        ignore_errors: yes #obviously not a good idea

      - name: Configuring kaldi/src
        shell: "./configure {{kaldi_configure_options}}"
        args:
          chdir: "{{lm_prefix}}/opt/kaldi/src"

      - name: Compiling kaldi/src
        shell: make -j $(nproc)
        args:
          chdir: "{{lm_prefix}}/opt/kaldi/src"
        environment:
          KALDI_ROOT: "{{lm_prefix}}/opt/kaldi"

      - name: Testing kaldi
        shell: make test
        args:
          chdir: "{{lm_prefix}}/opt/kaldi/src"
        environment:
          KALDI_ROOT: "{{lm_prefix}}/opt/kaldi"
        ignore_errors: "{{ kaldi_test_ignore_errors }}"

      - name: "Adding activation script for Kaldi"
        become: "{{lm_become}}"
        become_user: root
        copy:
          dest: "{{lm_prefix}}/bin/activate.d/kaldi.sh"
          content: |
            export KALDI_ROOT={{lm_prefix}}/opt/kaldi
          mode: u+rwx,a+rx

  - name: "Kaldi - Get latest commit hash"
    shell: "git describe --tags || git rev-parse HEAD"
    args:
      chdir: "{{ lm_prefix }}/opt/kaldi"
    register: latest_commit
    changed_when: False

  - name: Register Kaldi
    include_role:
       name: lamachine-register
    vars:
       metadata:
         identifier: kaldi
         name: Kaldi
         version: "{{ latest_commit.stdout }}"
         author: (multiple)
         url: "http://kaldi-asr.org/"
         codeRepository: "https://github.com/kaldi-asr/kaldi"
         license: Apache
         description: "Automatic Speech Recognition Toolkit"
         programmingLanguage: "C++"
         interfaceType: CLI
         keywords: [ "speech recognition", "asr", "cuda" ]

