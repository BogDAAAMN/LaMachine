---
 - when: locality == "global" and root and prefer_distro is defined and prefer_distro
   block:
       - name: "Installing Python packages from distribution instead of pip if preferred (Debian/Ubuntu)"
         become: yes
         become_user: root
         apt:
             name: "{{item}}"
             state: latest
        with_items:
             - cython3
             - python3-numpy
             - python3-scipy
             - python3-matplotlib
             - python3-crypto
             - python3-yaml
             - python3-requests
             - python3-requests-oauthlib
             - python3-flask
         when: ansible_distribution|lower == "debian" or ansible_distribution|lower == "ubuntu" or ansible_distribution|lower == "linuxmint"
       - name: "Installing Python packages from distribution as explicitly preferred (Debian/Ubuntu)"
         become: yes
         become_user: root
         apt:
             name: "{{item}}"
             state: latest
         with_items:
             - python3-mysqldb
         when: (ansible_distribution|lower == "debian" and ansible_distribution_version >= 9) or (ansible_distribution|lower == "ubuntu" and ansible_distribution_version >= 16.04) or ansible_distribution|lower == "linuxmint"


 - name: "Finding global pip3"
   shell: which pip3
   register: pip
   when: locality == "global"

 - when: localenv_type == "virtualenv"
   block:
     - name: "Installing generic 3rd party Python Packages via pip (1)"
       become: "{% if root and locality == \"global\" %}yes{% else %}no{% endif %}"
       become_user: root
       pip:
           name: "{{item}}"
           state: "{% if prefer_distro %}present{% else %}latest{% end %}"
           executable: "{% if locality == \"local\" %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %}"
       with_items: #more or less in dependency order
           - cython
           - lxml
           - pyyaml
           - numpy
           - matplotlib
           - requests
           - flask
     - name: "Installing generic 3rd party Python Packages via pip (2)"
       become: "{% if root and locality == \"global\" %}yes{% else %}no{% endif %}"
       become_user: root
       pip:
           name: "{{item}}"
           state: "{% if prefer_distro %}present{% else %}latest{% end %}"
           executable: "{% if locality == \"local\" %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %}"
       with_items: #more or less in dependency order
           - scipy
           - scikit-learn
           - beautifulsoup4
           - pandas
           - ipython
           - jupyter
           - nbconvert
           - nltk
           - pycrypto
           - pylint
           - pymongo
           - pymysql
           - seaborn
           - spacy
           - sphinx
           - tensorflow
           - word2vec
           - xlsxwriter
           - gensim
           - pillow
           - keras
       when: minimal is not defined or not minimal

#############################################################
#currently experimental/unused conda related stuff:
#
 - when: locality == "local"
   block:
     - name: "Installing generic 3rd party Python Packages via conda"
       shell: "{{local_prefix}}/bin/conda install -mqy -p {{local_prefix}} beautifulsoup4 cython flask ipython jupyter lxml matplotlib nbconvert nltk numpy pandas pycrypto pylint pymongo pymysql requests scikit-learn scipy seaborn spacy sphinx tensorflow word2vec xlsxwriter yaml gensim pillow keras"
       when: localenv_type == "conda"
       register: condainstall
       changed_when: '"All requested packages already installed" not in condainstall.stdout'
     - name: "Making sure all conda packages are up to date"
       shell: "{{local_prefix}}/bin/conda update -mqy -p {{local_prefix}} --all"
       when: localenv_type == "conda"
