---

    - name: "Registering metadata: overview :: update"
      debug:
           var: update
    - name: "Registering metadata: overview :: package"
      debug:
           var: package
    - name: "Registering metadata: overview :: metadata_defaults"
      debug:
           var: metadata_defaults
    - name: "Registering metadata: overview :: metadata"
      debug:
           var: metadata

    - name: "Download remote metadata {% if url is defined and url %}from {{url}}{% endif %}"
      get_url:
          url: "{{url}}"
          dest: "{{lm_prefix}}/var/codemeta.tmp.json"
          force: yes
      when: url is defined and url != ""

    - name: "Outputting temporary metadata"
      copy:
        content: '{% if "metadata" in package %}{{ metadata_defaults|combine(metadata)|combine(package.metadata)|to_json }}{% else %}{{ metadata_defaults|combine(metadata)|to_json }}{% endif %}'
        dest: "{{lm_prefix}}/var/tmpmetadata.json"
        force: yes

        - name: "{% if 'pip' in package and package.pip %}{{package.pip}}{% elif 'metadata' in package and 'identifier' in package.metadata %}{{ metadata.package.identifier }}{% elif 'identifier' in metadata %}{{ metadata.identifier }}{% elif 'identifier' in metadata_defaults %}{{ metadata_defaults.identifier }}{% endif %} - Registering metadata"
      shell: |
        #!/bin/bash
        # what we do here is build a chain of metadata, each one updating over the last, effectively merging all the fields
        set -o pipefail
        echo "Run environment:">&2
        echo "    LM_NAME=$LM_NAME">&2
        echo "    PATH=$PATH">&2
        echo "    LD_LIBRARY_PATH=$LD_LIBRARY_PATH">&2
        echo "    VIRTUAL_ENV=$VIRTUAL_ENV">&2
        echo "    PYTHONPATH=$PYTHONPATH">&2
        echo "    PYTHON=$(which python3)">&2
        echo "    PIP=$(which pip3)">&2
        {% if 'pip' in package and package.pip %}
        python3 -m pip show -v {{package.pip}} | {{lm_prefix}}/bin/codemetapy --with-entrypoints -r {{lm_prefix}}/var/lamachine-registry.json -i {% if update %}registry,{% endif %}{% if codemeta %}json,{% endif %}{% if url is defined and url %}json,{% endif %}json,pip {% if update %}{{update}}{% endif %} {% if url is defined and url %}{{lm_prefix}}/var/codemeta.tmp.json{% endif %} {% if codemeta %}{{codemeta}}{% endif %} {{lm_prefix}}/var/tmpmetadata.json -
        exit $?
        {% else %}
        {{lm_prefix}}/bin/codemetapy --with-entrypoints -r {{lm_prefix}}/var/lamachine-registry.json -i {% if update %}registry,{% endif %}{% if codemeta %}json,{% endif %}{% if url is defined and url %}json,{% endif %}json {% if update %}{{update}}{% endif %} {% if url is defined and url %}{{lm_prefix}}/var/codemeta.tmp.json{% endif %} {% if codemeta %}{{codemeta}}{% endif %} {{lm_prefix}}/var/tmpmetadata.json
        exit $?
        {% endif %}
      args:
        executable: /bin/bash
      register: register_result
      failed_when: "register_result.rc != 0 and register_result.rc != 3"
      environment: "{{lm_env}}"
