---
    - name: Check for unsupported OS for Alpino
      fail:
        msg: "Alpino is only on supported Debian/Ubuntu for now, it may not work on your OS !!!"
      when: not (ansible_distribution|lower == "debian" or ansible_distribution|lower == "ubuntu" or  ansible_distribution|lower == "linux mint")

    - name: Installing global dependencies for Alpino (Debian/Ubuntu)
      become: true
      become_user: root
      apt:
        name: "{{item}}"
        state: present
      with_items:
        - libtcl8.6
        - libtk8.6
        - libwww-perl
        - libxslt1.1
        - tk
        - unzip
      when: root and (ansible_distribution|lower == "debian" or ansible_distribution|lower == "ubuntu" or  ansible_distribution|lower == "linux mint")

    - name: Checking custom version
      debug:
          msg: "IMPORTANT NOTE: Custom versioning is NOT supported with Alpino"
      when: version == "custom"

    - name: "Alpino - Download and install"
      shell: |
          #!/bin/bash
          wget http://www.let.rug.nl/vannoord/alp/Alpino/versions/binary/ -O .alpino_index
          {% if (force is defined) %}
          INSTALL=1
          {% else %}
          if [ -e .alpino_index_old ]; then
            if [ "$(sha256sum .alpino_index | cut -d ' ' -f 1 )" = "$(sha256sum .alpino_index_old | cut -d ' ' -f 1 )" ]; then
              INSTALL=0
            else
              INSTALL=1
            fi
          else
            INSTALL=1
          fi
          {% endif %}
          if [ $INSTALL -eq 0 ]; then
            echo "Alpino already up to date..."
            exit 123
          fi
          rm latest.tar.gz 2>/dev/null
          wget http://www.let.rug.nl/vannoord/alp/Alpino/versions/binary/latest.tar.gz && tar -xvzf latest.tar.gz -C {{lm_prefix}}/opt/ && mv -f .alpino_index .alpino_index_old && rm latest.tar.gz
          exit $?
      args:
        chdir: "{{ source_path }}"
      register: install_alpino
      changed_when: install_alpino.rc != 123
      failed_when: install_alpino.rc != 0 and install_alpino.rc != 123

    - name: "Adding activation script for Alpino"
      become: "{{lm_become}}"
      become_user: root
      copy:
        dest: "{{lm_prefix}}/bin/activate.d/alpino.sh"
        content: |
          export ALPINO_HOME={{lm_prefix}}/opt/Alpino
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:{{lm_prefix}}/opt/Alpino/create_bin/extralibs/boost:{{lm_prefix}}/opt/Alpino/create_bin/extralibs
        mode: u+rwx,a+rx

    - name: "Linking Alpino binary from {{lm_prefix}}/bin/Alpino"
      copy:
        dest: "{{lm_prefix}}/bin/Alpino"
        content: |
          #!/bin/bash
          export ALPINO_HOME={{lm_prefix}}/opt/Alpino
          {{lm_prefix}}/opt/Alpino/bin/Alpino $@
        force: yes
        mode: u+rwx,a+rx

    - name: "Get Alpino version"
      shell: "cat version"
      args:
        chdir: "{{ lm_prefix }}/opt/Alpino"
      register: alpino_version

    - name: Register ALPINO
      include_role:
         name: lamachine-register
      vars:
         metadata:
           identifier: alpino
           name: Alpino
           version: "{{alpino_version.stdout}}"
           author: [ "Gertjan van Noord", "Gosse Bouma" ]
           url: "http://www.let.rug.nl/vannoord/alp/Alpino/"
           producer:
             - "@type": Organization
               name: "University of Groningen"
               url: https://www.rug.nl
           license: LGPL
           description: "Alpino is a dependency parser for Dutch, developed in the context of the PIONIER Project Algorithms for Linguistic Processing."

    - when: webserver
      block:
        - name: "Install uwsgi configuration for alpino"
          become: "{{lm_become}}"
          become_user: root
          template:
            src: "uwsgi/{{item}}.ini"
            dest: "{{lm_prefix}}/etc/uwsgi-emperor/vassals/{{item}}.ini"
            force: yes
            backup: yes
            owner: "{{web_user}}" #permissions need to match the runner
            group: "{{web_group}}"
            mode: u+rw,a+r
          when: '"all" in services or item in services'
          with_items:
            - alpino

        - name: "Install clam configuration for alpino"
          become: "{{lm_become}}"
          become_user: root
          template:
            src: "clam/{{item}}.config.yml"
            dest: "{{lm_prefix}}/etc/{{item}}.config.yml"
            force: yes
            backup: yes
            owner: "{{unix_user}}"
            group: "{{unix_group}}"
            mode: u+rw,a+r
          when: '"all" in services or item in services'
          with_items:
            - alpino

        - name: Register Alpino webservice
          include_role:
              name: lamachine-register
          vars:
              update: "{{item}}"
              metadata: #add entrypoint metadata to registry
                  identifier: "{{item}}"
                  entryPoints:
                    - { "@type": "EntryPoint",  urlTemplate: "{{lm_base_url}}/{{item}}", interfaceType: "WUI", mediatorApplication: "#clamservices" }
                    - { "@type": "EntryPoint",  urlTemplate: "{{lm_base_url}}/{{item}}", interfaceType: "REST", specification: "{{lm_base_url}}/{{item}}/info",  mediatorApplication: "#clamservices" }
          when: '"all" in services or item in services'
          with_items:
            - alpino
