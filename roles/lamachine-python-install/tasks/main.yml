---
- when: "'exclude_when' not in package or not package.exclude_when|bool"
  block:
    - name: "{% if 'github_repo' in package %}{{package.github_repo}}{% else %}(NOT APPLICABLE){% endif %} - Installing from github (development/custom)"
      block:
        - name: "{{package.github_repo}} - Git clone/pull latest {% if 'git_branch' in package %}{{ package.git_branch }}{% else %}master{% endif %}" #we always do this, even if we're not using the source for installation (we still need to check for codemeta.json)
          git:
            repo: "https://github.com/{{package.github_user}}/{{package.github_repo}}"
            dest: "{{ source_path }}/{{ package.github_repo }}"
            version: "{% if 'version' in package and package.version %}{{ version }}{% elif version == 'custom' and 'pip' in package and package.pip.lower() in customversion and customversion[package.pip.lower()] != 'development' and customversion[package.pip.lower()] != 'stable' %}{{ customversion[package.pip.lower()] }}{% elif version == 'custom' and 'pip' not in package and package.github_repo.lower() in customversion and customversion[package.github_repo.lower()] != 'development' and customversion[package.github_repo.lower()] != 'stable' %}{{ customversion[package.github_repo.lower()] }}{% elif 'git_branch' in package and package.git_branch %}{{ package.git_branch }}{% else %}master{% endif %}"
            recursive: yes
            update: yes
          environment: "{{lm_env}}"
          when: '"github_user" in package and package.github_user != "" and "github_repo" in package and package.github_repo != "" and ("ignore_git" not in package or not package.ignore_git)'

        - name: "{{package.github_repo}} - Installing python package (development/custom)"
          become: "{{lm_become}}"
          become_user: root
          shell: "python3 {% if 'setup' in package and package.setup %}{{package.setup}}{% else %}setup.py{% endif %} install {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}"
          args:
            chdir: "{{ source_path }}/{{package.github_repo}}{% if 'setupdir' in package %}/{{ package.setupdir }}{% endif %}"
          environment: "{{lm_env}}"
          when: '"github_user" in package and package.github_user != "" and "github_repo" in package and package.github_repo != "" and (version == "development" or ("pip" not in package or package.pip == ""))'

    - name: "{% if 'pip' in package %}{{package.pip}}{% else %}(NOT APPLICABLE){% endif %} - Installing custom version from the Python Package Index"
      become: "{{lm_become}}"
      become_user: root
      pip:
           name: "{{package.pip}}"
           state: "{% if force is defined and force %}forcereinstall{% elif 'state' in package %}{{package.state}}{% else %}present{% endif %}"
           executable: "{% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %}"
           version: "{% if 'version' in package and package.version %}{{package.version}}{% elif version == 'custom' and package.pip.lower() in customversion and customversion[package.pip.lower()] != 'stable' and customversion[package.pip.lower()] != 'development' %}{{customversion[package.pip.lower()]}}{% endif %}"
           extra_args: "--upgrade-strategy only-if-needed {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}"
      environment: "{{lm_env}}"
      when: ("pip" in package and package.pip != "" and ((version == "custom" and package.pip.lower() in customversion and customversion[package.pip.lower()] != "stable")  or ('version' in package and package.version and package.version != "stable")) and ("github_user" not in package or package.github_user == ""))

    - name: "{% if 'pip' in package %}{{package.pip}}{% else %}(NOT APPLICABLE){% endif %} - Installing latest release from the Python Package Index (stable)"
      become: "{{lm_become}}"
      become_user: root
      pip:
           name: "{{package.pip}}"
           state: "{% if force is defined and force %}forcereinstall{% elif 'state' in package %}{{package.state}}{% else %}latest{% endif %}"
           executable: "{% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %}"
           extra_args: "--upgrade-strategy only-if-needed {% if locality == 'global' %}--prefix {{lm_prefix}}{% endif %}"
      environment: "{{lm_env}}"
      when: ("pip" in package and package.pip != "" and ('version' not in package or not package.version) and (version == "stable" or (version == "development" and ("github_user" not in package or package.github_user == "")) or (version == "custom" and package.pip.lower() in customversion and customversion[package.pip.lower()] == "stable")))

    - name: "{% if 'github_repo' in package %}{{package.github_repo}}{% else %}(NOT APPLICABLE){% endif %} - Checking whether codemeta.json is provided"
      stat:
        path: "{{ source_path }}/{{package.github_repo}}/codemeta.json"
      register: have_codemeta
      changed_when: False
      when: "'github_repo' in package"


    - name: "{% if 'pip' in package %}{{package.pip}}{% else %}{{package.github_repo}}{% endif %} -  Register software metadata"
      include_role:
          name: lamachine-register
      vars:
          codemeta: "{% if 'github_repo' in package and have_codemeta.stat.exists %}{{ source_path }}/{{package.github_repo}}/codemeta.json{% endif %}"
          metadata_defaults:
             identifier: "{% if 'pip' in package %}{{package.pip|lower}}{% else %}{{ package.github_repo|lower }}{% endif %}"
             name: "{% if 'pip' in package %}{{package.pip}}{% else %}{{ package.github_repo }}{% endif %}"
             codeRepository: "{% if 'github_repo' in package %}https://github.com/{{package.github_user}}/{{package.github_repo}}{% endif %}"
             producer: "{% if 'github_user' in package %}{% if package.github_user in github_clst_users %}{{metadata_producer_clst}}{% else %}{{metadata_producer_unknown}}{% endif %}{% else %}{{metadata_producer_unknown}}{% endif %}"
      when: do_registration is defined and do_registration|bool



