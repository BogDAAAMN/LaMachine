---
- when: "'exclude_when' not in package or not package.exclude_when"
  block:
    - name: "{% if 'github_repo' in package %}{{package.github_repo}}{% else %}(NOT APPLICABLE){% endif %} - Installing latest version from github (development)"
      block:
        - name: "{% if 'github_repo' in package %}{{package.github_repo}}{% else %}(NOT APPLICABLE){% endif %} - Check if repository exists"
          stat:
            path: "{{ source_path }}/{{ package.github_repo }}"
          register: repo_path
        - name: "{{package.github_repo}} - Git clone"
          shell: "git clone https://github.com/{{package.github_user}}/{{package.github_repo}}"
          args:
            chdir: "{{ source_path }}"
          when: not repo_path.stat.exists
        - name: "{% if 'github_repo' in package %}{{package.github_repo}}{% else %}(NOT APPLICABLE){% endif %} - Checkout latest master version of (development)"
          shell: "git checkout master && git pull"
          args:
            chdir: "{{ source_path }}/{{package.github_repo}}"
        - name: "{% if 'github_repo' in package %}{{package.github_repo}}{% else %}(NOT APPLICABLE){% endif %} - Installing python package"
          become: "{{lm_become}}"
          become_user: root
          shell: "python3 {% if 'setup' in package %}{{package.setup}}{% else %}setup.py{% endif %} install"
          args:
            chdir: "{{ source_path }}/{{package.github_repo}}{% if 'setupdir' in package %}/{{ package.setupdir }}{% endif %}"
      environment: "{{lm_env}}"
      when: '"github_user" in package and package.github_user != "" and "github_repo" in package and package.github_repo != "" and (version == "development" or ("pip" not in package or package.pip == ""))'


    - name: "{% if 'pip' in package %}{{package.pip}}{% else %}(NOT APPLICABLE){% endif %} - Installing latest release from the Python Package Index (stable)"
      become: "{{lm_become}}"
      become_user: root
      pip:
           name: "{{package.pip}}"
           state: "{% if 'state' in package %}{{package.state}}{% else %}latest{% endif %}"
           executable: "{% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %}"
      environment: "{{lm_env}}"
      when: (version == "stable" or (version == "development" and ("github_user" not in package or package.github_user == ""))) and localenv_type != "conda" and "pip" in package and package.pip != ""

    - name: "{% if 'conda' in package %}{{package.conda}}{% else %}(NOT APPLICABLE){% endif %} - Installing latest release from conda (stable)"
      command: "{{local_prefix}}/bin/conda install -mqy -p {{local_prefix}} {{package.conda}}"
      environment: "{{lm_env}}"
      when: (version == "stable" or (version == "development" and ("github_user" not in package or package.github_user == ""))) and localenv_type == "conda" and "conda" in package and package.conda != ""

    - name: "{% if 'pip' in package %}{{package.pip}}{% else %}(NOT APPLICABLE){% endif %} - Installing latest release from the Python Package Index (stable, conda)"
      pip:
           name: "{{package.pip}}"
           state: latest
           executable: "{% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %}"
      environment: "{{lm_env}}"
      when: (version == "stable" or (version == "development" and ("github_user" not in package or package.github_user == ""))) and localenv_type == "conda" and ("conda" not in package or package.conda == "") and "pip" in package and package.pip != ""

    - name: Register software in lamachine-list
      include_role:
        name: lamachine-run
      vars:
        command: "echo '{{package.pip}}:' >> {{lm_prefix}}/var/lamachine-list.yml && {% if locality == 'local' %}{{ local_prefix }}/bin/pip{% else %}{{pip.stdout}}{% endif %} show {{package.pip}} | sed 's/^/    /' >> {{lm_prefix}}/var/lamachine-list.yml && echo >> {{lm_prefix}}/var/lamachine-list.yml"
      when: '"pip" in package and package.pip'

